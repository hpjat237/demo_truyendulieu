import json
from kafka import KafkaConsumer
from pymongo import MongoClient

# C·∫•u h√¨nh Kafka
KAFKA_BROKER = 'localhost:9093' # C·ªïng EXTERNAL
CDC_TOPIC = 'cdc.mydatabase.transactions'
GROUP_ID = 'enrichment_group'

# C·∫•u h√¨nh MongoDB (Ngu·ªìn d·ªØ li·ªáu tƒ©nh V√Ä N∆°i l∆∞u k·∫øt qu·∫£)
MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "mydatabase"
USERS_COLLECTION = "users"
SINK_COLLECTION = "enriched_transactions"


def get_user_info(db, user_id):
    """Truy v·∫•n MongoDB ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng tƒ©nh."""
    users_collection = db[USERS_COLLECTION]
    user = users_collection.find_one({"user_id": user_id}, {"_id": 0, "name": 1, "city": 1})
    return user if user else {"name": "Unknown", "city": "Unknown"}

def process_stream():
    # 1. K·∫øt n·ªëi MongoDB
    mongo_client = MongoClient(MONGO_URI)
    db = mongo_client[DB_NAME]
    sink_collection = db[SINK_COLLECTION]
    sink_collection.delete_many({}) # X√≥a d·ªØ li·ªáu c≈© cho demo
    
    # 2. K·∫øt n·ªëi Kafka Consumer
    consumer = KafkaConsumer(
        CDC_TOPIC,
        bootstrap_servers=[KAFKA_BROKER],
        auto_offset_reset='latest',
        enable_auto_commit=True,
        group_id=GROUP_ID,
        value_deserializer=lambda x: json.loads(x.decode('utf-8'))
    )

    print(f"üîÑ ƒêang ch·ªù giao d·ªãch m·ªõi t·ª´ Kafka topic: {CDC_TOPIC}...")

    for message in consumer:
        try:
            # S·ª± ki·ªán Debezium: Value ch·ª©a payload CDC
            payload = message.value.get('payload')
            
            if not payload or payload.get('op') != 'c':
                # Ch·ªâ x·ª≠ l√Ω s·ª± ki·ªán 'c' (create/insert)
                continue

            # 'after' ch·ª©a t√†i li·ªáu sau khi thay ƒë·ªïi (t·ª©c l√† t√†i li·ªáu v·ª´a ƒë∆∞·ª£c ch√®n)
            transaction_data = payload.get('after')
            
            if not transaction_data:
                continue

            # L·∫•y user_id t·ª´ d·ªØ li·ªáu giao d·ªãch
            user_id = transaction_data.get('user_id')
            
            # --- B∆Ø·ªöC 3 & 4: JOIN/ENRICHMENT ---
            user_info = get_user_info(db, user_id)
            
            # T·∫°o b·∫£n ghi ƒë√£ ƒë∆∞·ª£c l√†m gi√†u
            enriched_record = {
                "transaction_id": str(transaction_data.get('_id')),
                "user_id": user_id,
                "amount": transaction_data.get('amount'),
                "timestamp": transaction_data.get('timestamp'),
                "user_name": user_info['name'],
                "user_city": user_info['city']
            }
            
            # --- B∆Ø·ªöC 5: L∆ØU K·∫æT QU·∫¢ ---
            sink_collection.insert_one(enriched_record)

            print(f"‚úÖ ƒê√£ l√†m gi√†u v√† l∆∞u: User '{user_info['name']}' ({user_info['city']}) mua {enriched_record['amount']}")

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω th√¥ng ƒëi·ªáp: {e}")
            
    mongo_client.close()

if __name__ == "__main__":
    process_stream()